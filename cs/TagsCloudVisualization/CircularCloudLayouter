using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using static NUnit.Framework.Constraints.Tolerance;

namespace TagsCloudVisualization
{
    public class TagsCloudVisualization
    {
        public Point Center;
        public List<Rectangle> WordPositions;
        public double Radius;
        public double Angle;

        public TagsCloudVisualization(Point center)
        {
            Center = center;
            Radius = 0;
            Angle = 0;
            WordPositions = new List<Rectangle>();
        }

        public Rectangle PutNextRectangle(Size rectangleSize)
        {
            while (true)
            {
                if (rectangleSize.Width < 1 || rectangleSize.Height < 1)
                    throw new ArgumentException();

                var x = Radius * Math.Cos(Angle) + Center.X;
                var y = Radius * Math.Sin(Angle)+ Center.Y;

                var currRectangle = new Rectangle(new Point((int)x, (int)y), rectangleSize);

                if (!CheckIntersection(currRectangle))
                {
                    WordPositions.Add(currRectangle);
                    return currRectangle;
                }

                Angle += 0.1;

                if (Angle >= Math.PI * 2)
                {
                    Angle = 0;
                    Radius += 0.5;
                }
            }
        }


        public bool CheckIntersection(Rectangle currRectangle)
        {
            return WordPositions.Any(rec =>
            {
                var isRecIntersect = Rectangle.Intersect(rec,currRectangle);
                return !isRecIntersect.IsEmpty;
            });
        }

        public void Drawing()
        {
            int w = 10000;
            int h = 10000;
            Bitmap bitmap = new Bitmap(w, h);
            Graphics graphics = Graphics.FromImage(bitmap);
            Brush brush = new SolidBrush(Color.Blue);

            // Рисование прямоугольников
            foreach (var word in WordPositions)
            {
                var x = word.X + 5000;
                var y = word.Y + 5000;
                graphics.FillRectangle(brush, x,y,word.Width,word.Height);
            }

            bitmap.Save("C:\\Users\\hellw\\Desktop\\output.png", System.Drawing.Imaging.ImageFormat.Png);
        }
    }
}